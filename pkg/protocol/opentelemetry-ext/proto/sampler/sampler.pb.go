//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.7.1
// source: opentelemetry-ext/proto/sampler/sampler.proto

package sampler

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *KeyValues) Reset() {
	*x = KeyValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValues) ProtoMessage() {}

func (x *KeyValues) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValues.ProtoReflect.Descriptor instead.
func (*KeyValues) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{0}
}

func (x *KeyValues) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Sampled  bool   `protobuf:"varint,3,opt,name=sampled,proto3" json:"sampled,omitempty"`
	Deadline int64  `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Comment  string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *KeyValue) GetSampled() bool {
	if x != nil {
		return x.Sampled
	}
	return false
}

func (x *KeyValue) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *KeyValue) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SetSamplerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*KeyValues `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *SetSamplerRequest) Reset() {
	*x = SetSamplerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSamplerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSamplerRequest) ProtoMessage() {}

func (x *SetSamplerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSamplerRequest.ProtoReflect.Descriptor instead.
func (*SetSamplerRequest) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{2}
}

func (x *SetSamplerRequest) GetAttributes() []*KeyValues {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SetSamplerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSamplerResponse) Reset() {
	*x = SetSamplerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSamplerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSamplerResponse) ProtoMessage() {}

func (x *SetSamplerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSamplerResponse.ProtoReflect.Descriptor instead.
func (*SetSamplerResponse) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{3}
}

type SetSamplerV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*KeyValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *SetSamplerV2Request) Reset() {
	*x = SetSamplerV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSamplerV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSamplerV2Request) ProtoMessage() {}

func (x *SetSamplerV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSamplerV2Request.ProtoReflect.Descriptor instead.
func (*SetSamplerV2Request) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{4}
}

func (x *SetSamplerV2Request) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SetSamplerV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSamplerV2Response) Reset() {
	*x = SetSamplerV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSamplerV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSamplerV2Response) ProtoMessage() {}

func (x *SetSamplerV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSamplerV2Response.ProtoReflect.Descriptor instead.
func (*SetSamplerV2Response) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{5}
}

type GetSamplerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSamplerRequest) Reset() {
	*x = GetSamplerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplerRequest) ProtoMessage() {}

func (x *GetSamplerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplerRequest.ProtoReflect.Descriptor instead.
func (*GetSamplerRequest) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{6}
}

type GetSamplerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*KeyValues `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *GetSamplerResponse) Reset() {
	*x = GetSamplerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplerResponse) ProtoMessage() {}

func (x *GetSamplerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplerResponse.ProtoReflect.Descriptor instead.
func (*GetSamplerResponse) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{7}
}

func (x *GetSamplerResponse) GetAttributes() []*KeyValues {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type GetSamplerV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSamplerV2Request) Reset() {
	*x = GetSamplerV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplerV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplerV2Request) ProtoMessage() {}

func (x *GetSamplerV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplerV2Request.ProtoReflect.Descriptor instead.
func (*GetSamplerV2Request) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{8}
}

type GetSamplerV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*KeyValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *GetSamplerV2Response) Reset() {
	*x = GetSamplerV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplerV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplerV2Response) ProtoMessage() {}

func (x *GetSamplerV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplerV2Response.ProtoReflect.Descriptor instead.
func (*GetSamplerV2Response) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{9}
}

func (x *GetSamplerV2Response) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DelSamplerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DelSamplerRequest) Reset() {
	*x = DelSamplerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSamplerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSamplerRequest) ProtoMessage() {}

func (x *DelSamplerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSamplerRequest.ProtoReflect.Descriptor instead.
func (*DelSamplerRequest) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{10}
}

func (x *DelSamplerRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DelSamplerRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DelSamplerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelSamplerResponse) Reset() {
	*x = DelSamplerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSamplerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSamplerResponse) ProtoMessage() {}

func (x *DelSamplerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSamplerResponse.ProtoReflect.Descriptor instead.
func (*DelSamplerResponse) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{11}
}

type JudgeSamplerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JudgeSamplerRequest) Reset() {
	*x = JudgeSamplerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeSamplerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeSamplerRequest) ProtoMessage() {}

func (x *JudgeSamplerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeSamplerRequest.ProtoReflect.Descriptor instead.
func (*JudgeSamplerRequest) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{12}
}

func (x *JudgeSamplerRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JudgeSamplerRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type JudgeSamplerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sampled  bool  `protobuf:"varint,1,opt,name=sampled,proto3" json:"sampled,omitempty"`
	Deadline int64 `protobuf:"varint,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *JudgeSamplerResponse) Reset() {
	*x = JudgeSamplerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeSamplerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeSamplerResponse) ProtoMessage() {}

func (x *JudgeSamplerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeSamplerResponse.ProtoReflect.Descriptor instead.
func (*JudgeSamplerResponse) Descriptor() ([]byte, []int) {
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP(), []int{13}
}

func (x *JudgeSamplerResponse) GetSampled() bool {
	if x != nil {
		return x.Sampled
	}
	return false
}

func (x *JudgeSamplerResponse) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

var File_opentelemetry_ext_proto_sampler_sampler_proto protoreflect.FileDescriptor

var file_opentelemetry_ext_proto_sampler_sampler_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d,
	0x65, 0x78, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x22, 0x35, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x14, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x60, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3b,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x0a, 0x13, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x4c, 0x0a, 0x14, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0xec,
	0x05, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x75, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x56, 0x32, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x56, 0x32,
	0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4b, 0x5a,
	0x49, 0x74, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x6f, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescOnce sync.Once
	file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescData = file_opentelemetry_ext_proto_sampler_sampler_proto_rawDesc
)

func file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescGZIP() []byte {
	file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescOnce.Do(func() {
		file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescData = protoimpl.X.CompressGZIP(file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescData)
	})
	return file_opentelemetry_ext_proto_sampler_sampler_proto_rawDescData
}

var file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_opentelemetry_ext_proto_sampler_sampler_proto_goTypes = []interface{}{
	(*KeyValues)(nil),            // 0: opentelemetry.ext.proto.sampler.KeyValues
	(*KeyValue)(nil),             // 1: opentelemetry.ext.proto.sampler.KeyValue
	(*SetSamplerRequest)(nil),    // 2: opentelemetry.ext.proto.sampler.SetSamplerRequest
	(*SetSamplerResponse)(nil),   // 3: opentelemetry.ext.proto.sampler.SetSamplerResponse
	(*SetSamplerV2Request)(nil),  // 4: opentelemetry.ext.proto.sampler.SetSamplerV2Request
	(*SetSamplerV2Response)(nil), // 5: opentelemetry.ext.proto.sampler.SetSamplerV2Response
	(*GetSamplerRequest)(nil),    // 6: opentelemetry.ext.proto.sampler.GetSamplerRequest
	(*GetSamplerResponse)(nil),   // 7: opentelemetry.ext.proto.sampler.GetSamplerResponse
	(*GetSamplerV2Request)(nil),  // 8: opentelemetry.ext.proto.sampler.GetSamplerV2Request
	(*GetSamplerV2Response)(nil), // 9: opentelemetry.ext.proto.sampler.GetSamplerV2Response
	(*DelSamplerRequest)(nil),    // 10: opentelemetry.ext.proto.sampler.DelSamplerRequest
	(*DelSamplerResponse)(nil),   // 11: opentelemetry.ext.proto.sampler.DelSamplerResponse
	(*JudgeSamplerRequest)(nil),  // 12: opentelemetry.ext.proto.sampler.JudgeSamplerRequest
	(*JudgeSamplerResponse)(nil), // 13: opentelemetry.ext.proto.sampler.JudgeSamplerResponse
}
var file_opentelemetry_ext_proto_sampler_sampler_proto_depIdxs = []int32{
	0,  // 0: opentelemetry.ext.proto.sampler.SetSamplerRequest.attributes:type_name -> opentelemetry.ext.proto.sampler.KeyValues
	1,  // 1: opentelemetry.ext.proto.sampler.SetSamplerV2Request.attributes:type_name -> opentelemetry.ext.proto.sampler.KeyValue
	0,  // 2: opentelemetry.ext.proto.sampler.GetSamplerResponse.attributes:type_name -> opentelemetry.ext.proto.sampler.KeyValues
	1,  // 3: opentelemetry.ext.proto.sampler.GetSamplerV2Response.attributes:type_name -> opentelemetry.ext.proto.sampler.KeyValue
	2,  // 4: opentelemetry.ext.proto.sampler.SamplerService.SetSampler:input_type -> opentelemetry.ext.proto.sampler.SetSamplerRequest
	6,  // 5: opentelemetry.ext.proto.sampler.SamplerService.GetSampler:input_type -> opentelemetry.ext.proto.sampler.GetSamplerRequest
	10, // 6: opentelemetry.ext.proto.sampler.SamplerService.DelSampler:input_type -> opentelemetry.ext.proto.sampler.DelSamplerRequest
	12, // 7: opentelemetry.ext.proto.sampler.SamplerService.JudgeSampler:input_type -> opentelemetry.ext.proto.sampler.JudgeSamplerRequest
	4,  // 8: opentelemetry.ext.proto.sampler.SamplerService.SetSamplerV2:input_type -> opentelemetry.ext.proto.sampler.SetSamplerV2Request
	8,  // 9: opentelemetry.ext.proto.sampler.SamplerService.GetSamplerV2:input_type -> opentelemetry.ext.proto.sampler.GetSamplerV2Request
	3,  // 10: opentelemetry.ext.proto.sampler.SamplerService.SetSampler:output_type -> opentelemetry.ext.proto.sampler.SetSamplerResponse
	7,  // 11: opentelemetry.ext.proto.sampler.SamplerService.GetSampler:output_type -> opentelemetry.ext.proto.sampler.GetSamplerResponse
	11, // 12: opentelemetry.ext.proto.sampler.SamplerService.DelSampler:output_type -> opentelemetry.ext.proto.sampler.DelSamplerResponse
	13, // 13: opentelemetry.ext.proto.sampler.SamplerService.JudgeSampler:output_type -> opentelemetry.ext.proto.sampler.JudgeSamplerResponse
	5,  // 14: opentelemetry.ext.proto.sampler.SamplerService.SetSamplerV2:output_type -> opentelemetry.ext.proto.sampler.SetSamplerV2Response
	9,  // 15: opentelemetry.ext.proto.sampler.SamplerService.GetSamplerV2:output_type -> opentelemetry.ext.proto.sampler.GetSamplerV2Response
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_opentelemetry_ext_proto_sampler_sampler_proto_init() }
func file_opentelemetry_ext_proto_sampler_sampler_proto_init() {
	if File_opentelemetry_ext_proto_sampler_sampler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSamplerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSamplerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSamplerV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSamplerV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplerV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplerV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSamplerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSamplerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeSamplerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeSamplerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opentelemetry_ext_proto_sampler_sampler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_opentelemetry_ext_proto_sampler_sampler_proto_goTypes,
		DependencyIndexes: file_opentelemetry_ext_proto_sampler_sampler_proto_depIdxs,
		MessageInfos:      file_opentelemetry_ext_proto_sampler_sampler_proto_msgTypes,
	}.Build()
	File_opentelemetry_ext_proto_sampler_sampler_proto = out.File
	file_opentelemetry_ext_proto_sampler_sampler_proto_rawDesc = nil
	file_opentelemetry_ext_proto_sampler_sampler_proto_goTypes = nil
	file_opentelemetry_ext_proto_sampler_sampler_proto_depIdxs = nil
}
