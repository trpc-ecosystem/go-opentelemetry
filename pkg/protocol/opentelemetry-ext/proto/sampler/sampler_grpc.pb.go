//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 Tencent.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.7.1
// source: opentelemetry-ext/proto/sampler/sampler.proto

package sampler

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SamplerService_SetSampler_FullMethodName   = "/opentelemetry.ext.proto.sampler.SamplerService/SetSampler"
	SamplerService_GetSampler_FullMethodName   = "/opentelemetry.ext.proto.sampler.SamplerService/GetSampler"
	SamplerService_DelSampler_FullMethodName   = "/opentelemetry.ext.proto.sampler.SamplerService/DelSampler"
	SamplerService_JudgeSampler_FullMethodName = "/opentelemetry.ext.proto.sampler.SamplerService/JudgeSampler"
	SamplerService_SetSamplerV2_FullMethodName = "/opentelemetry.ext.proto.sampler.SamplerService/SetSamplerV2"
	SamplerService_GetSamplerV2_FullMethodName = "/opentelemetry.ext.proto.sampler.SamplerService/GetSamplerV2"
)

// SamplerServiceClient is the client API for SamplerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamplerServiceClient interface {
	SetSampler(ctx context.Context, in *SetSamplerRequest, opts ...grpc.CallOption) (*SetSamplerResponse, error)
	GetSampler(ctx context.Context, in *GetSamplerRequest, opts ...grpc.CallOption) (*GetSamplerResponse, error)
	DelSampler(ctx context.Context, in *DelSamplerRequest, opts ...grpc.CallOption) (*DelSamplerResponse, error)
	JudgeSampler(ctx context.Context, in *JudgeSamplerRequest, opts ...grpc.CallOption) (*JudgeSamplerResponse, error)
	SetSamplerV2(ctx context.Context, in *SetSamplerV2Request, opts ...grpc.CallOption) (*SetSamplerV2Response, error)
	GetSamplerV2(ctx context.Context, in *GetSamplerV2Request, opts ...grpc.CallOption) (*GetSamplerV2Response, error)
}

type samplerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSamplerServiceClient(cc grpc.ClientConnInterface) SamplerServiceClient {
	return &samplerServiceClient{cc}
}

func (c *samplerServiceClient) SetSampler(ctx context.Context, in *SetSamplerRequest, opts ...grpc.CallOption) (*SetSamplerResponse, error) {
	out := new(SetSamplerResponse)
	err := c.cc.Invoke(ctx, SamplerService_SetSampler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplerServiceClient) GetSampler(ctx context.Context, in *GetSamplerRequest, opts ...grpc.CallOption) (*GetSamplerResponse, error) {
	out := new(GetSamplerResponse)
	err := c.cc.Invoke(ctx, SamplerService_GetSampler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplerServiceClient) DelSampler(ctx context.Context, in *DelSamplerRequest, opts ...grpc.CallOption) (*DelSamplerResponse, error) {
	out := new(DelSamplerResponse)
	err := c.cc.Invoke(ctx, SamplerService_DelSampler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplerServiceClient) JudgeSampler(ctx context.Context, in *JudgeSamplerRequest, opts ...grpc.CallOption) (*JudgeSamplerResponse, error) {
	out := new(JudgeSamplerResponse)
	err := c.cc.Invoke(ctx, SamplerService_JudgeSampler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplerServiceClient) SetSamplerV2(ctx context.Context, in *SetSamplerV2Request, opts ...grpc.CallOption) (*SetSamplerV2Response, error) {
	out := new(SetSamplerV2Response)
	err := c.cc.Invoke(ctx, SamplerService_SetSamplerV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplerServiceClient) GetSamplerV2(ctx context.Context, in *GetSamplerV2Request, opts ...grpc.CallOption) (*GetSamplerV2Response, error) {
	out := new(GetSamplerV2Response)
	err := c.cc.Invoke(ctx, SamplerService_GetSamplerV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplerServiceServer is the server API for SamplerService service.
// All implementations must embed UnimplementedSamplerServiceServer
// for forward compatibility
type SamplerServiceServer interface {
	SetSampler(context.Context, *SetSamplerRequest) (*SetSamplerResponse, error)
	GetSampler(context.Context, *GetSamplerRequest) (*GetSamplerResponse, error)
	DelSampler(context.Context, *DelSamplerRequest) (*DelSamplerResponse, error)
	JudgeSampler(context.Context, *JudgeSamplerRequest) (*JudgeSamplerResponse, error)
	SetSamplerV2(context.Context, *SetSamplerV2Request) (*SetSamplerV2Response, error)
	GetSamplerV2(context.Context, *GetSamplerV2Request) (*GetSamplerV2Response, error)
	mustEmbedUnimplementedSamplerServiceServer()
}

// UnimplementedSamplerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSamplerServiceServer struct {
}

func (UnimplementedSamplerServiceServer) SetSampler(context.Context, *SetSamplerRequest) (*SetSamplerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSampler not implemented")
}
func (UnimplementedSamplerServiceServer) GetSampler(context.Context, *GetSamplerRequest) (*GetSamplerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampler not implemented")
}
func (UnimplementedSamplerServiceServer) DelSampler(context.Context, *DelSamplerRequest) (*DelSamplerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSampler not implemented")
}
func (UnimplementedSamplerServiceServer) JudgeSampler(context.Context, *JudgeSamplerRequest) (*JudgeSamplerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeSampler not implemented")
}
func (UnimplementedSamplerServiceServer) SetSamplerV2(context.Context, *SetSamplerV2Request) (*SetSamplerV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSamplerV2 not implemented")
}
func (UnimplementedSamplerServiceServer) GetSamplerV2(context.Context, *GetSamplerV2Request) (*GetSamplerV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamplerV2 not implemented")
}
func (UnimplementedSamplerServiceServer) mustEmbedUnimplementedSamplerServiceServer() {}

// UnsafeSamplerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamplerServiceServer will
// result in compilation errors.
type UnsafeSamplerServiceServer interface {
	mustEmbedUnimplementedSamplerServiceServer()
}

func RegisterSamplerServiceServer(s grpc.ServiceRegistrar, srv SamplerServiceServer) {
	s.RegisterService(&SamplerService_ServiceDesc, srv)
}

func _SamplerService_SetSampler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSamplerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).SetSampler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_SetSampler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).SetSampler(ctx, req.(*SetSamplerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplerService_GetSampler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).GetSampler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_GetSampler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).GetSampler(ctx, req.(*GetSamplerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplerService_DelSampler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSamplerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).DelSampler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_DelSampler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).DelSampler(ctx, req.(*DelSamplerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplerService_JudgeSampler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeSamplerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).JudgeSampler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_JudgeSampler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).JudgeSampler(ctx, req.(*JudgeSamplerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplerService_SetSamplerV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSamplerV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).SetSamplerV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_SetSamplerV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).SetSamplerV2(ctx, req.(*SetSamplerV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SamplerService_GetSamplerV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplerV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplerServiceServer).GetSamplerV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SamplerService_GetSamplerV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplerServiceServer).GetSamplerV2(ctx, req.(*GetSamplerV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SamplerService_ServiceDesc is the grpc.ServiceDesc for SamplerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SamplerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.ext.proto.sampler.SamplerService",
	HandlerType: (*SamplerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSampler",
			Handler:    _SamplerService_SetSampler_Handler,
		},
		{
			MethodName: "GetSampler",
			Handler:    _SamplerService_GetSampler_Handler,
		},
		{
			MethodName: "DelSampler",
			Handler:    _SamplerService_DelSampler_Handler,
		},
		{
			MethodName: "JudgeSampler",
			Handler:    _SamplerService_JudgeSampler_Handler,
		},
		{
			MethodName: "SetSamplerV2",
			Handler:    _SamplerService_SetSamplerV2_Handler,
		},
		{
			MethodName: "GetSamplerV2",
			Handler:    _SamplerService_GetSamplerV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opentelemetry-ext/proto/sampler/sampler.proto",
}
